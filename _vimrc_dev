" Specify a directory for plugins
" - Avoid using standard Vim directory names like 'plugin'
if has("win32")
    call plug#begin('$HOME/vimfiles/bundle')
else
    call plug#begin('~/.vim/bundle')
endif
"Make sure you use single quotes

"######### 1. VIM-相关 #########
"VIM中文文档(还集成了些常用的插件的中文文档!) Plug 'asins/vimcdoc'
Plug 'yianwillis/vimcdoc'
"最小空间占用的缓冲区列表   Plug 'fholgado/minibufexpl.vim'
"缓冲区列表增强             Plug 'bufexplorer.zip'
"分组式缓冲区列表           Plug 'TinyBufferExplorer'
"窗口布局管理器 (自己配映射就用不着了,它自带了file和tag的explorer) "Plug 'winmanager'
"<C-w>o变成最大化窗或还原布局, 太慢了.  Plug 'ZoomWin','regedarek/ZoomWin'
"让html标签或endif支持%, vim --startuptime /tmp/log 显示已加载自带的了
"Plug 'vim-scripts/matchit.zip'
"operation+motion:(vim内置)
"ci,di,yi,ca,da,ya接符号及dib,diB,cit为 删除(/复制)符号内的文本
"操作对象增强: ds"为删除", cs"'为由"替换成', ys+{motion}+符号为加符号
"可视模式(选中文本后)按S"为用"surround文本
Plug 'tpope/vim-surround'
"括号自动闭合 Plug 'kien/rainbow_parentheses.vim' 'jiangmiao/auto-pairs' 'kana/vim-smartinput' 'Townk/vim-autoclose'
"<s-tab>跳出闭合,i_<C-g>g跳出最外一层,不支持<C-h>挺好
Plug 'Raimondi/delimitMate'
"enable repeating supported plugin maps with "."
Plug 'tpope/vim-repeat'
Plug 'easymotion/vim-easymotion'
"目录浏览增强, 内置为netrw
Plug 'scrooloose/nerdtree'
"状态行增强                 Plug 'Lokaltog/powerline', 'bling/vim-airline'
Plug 'itchyny/lightline.vim'
"precision color scheme, 'altercation/solarized' is all in one.
Plug 'altercation/vim-colors-solarized'

"让fcitx响应vim的模式切换
Plug 'lilydjwg/fcitx.vim'

"command-T增强,模糊查找文件             Plug 'kien/ctrlp.vim'
"Ack, 通过配置可以使用ag搜索            Plug 'mileszs/ack.vim'
"The plugin is a front for ag(the_silver_searcher)
Plug 'rking/ag.vim'
"vim8, 异步, 文件搜索及显示函数列表, ctrlp增强
Plug 'Yggdroot/LeaderF'
"shell模式                  Plug 'Flolagale/conque'
"   vimshell依赖vimproc     Plug 'Shougo/vimshell.vim' | Plug 'Shougo/vimproc.vim'
"集成接口, 功能像ctrlp, 但可搜索显示任意来源的信息, 且可自定义来源  Plug 'Shougo/unite.vim'
"vim8, 异步, 后台运行 某程序
Plug 'skywind3000/asyncrun.vim'
"######### 1. VIM-相关 END #########

"######### 2. 编程-相关 #########
"文本排版
Plug 'godlygeek/tabular'
"垂直缩进线         Plug 'nathanaelkane/vim-indent-guides'
Plug 'Yggdroot/indentLine'
" 参数提示
Plug 'Shougo/echodoc.vim', { 'for': 'python' }
"majutsushi/tagbar是taglist增强!    Plug 'majutsushi/tagbar'
Plug 'liuchengxu/vista.vim'

"python all in one!         Plug 'klen/python-mode'
"杀手级clang语法解析补全插件(all in one!)
"2015年 12月 02日 星期三 14:38:58 CST
"win下要用到visual studio编译
", { 'do': 'python3 ./install.py --java-completer' }
Plug 'Valloric/YouCompleteMe'

"语法检查器,保存文本时才检查(即默认的主动模式)  Plug 'scrooloose/syntastic'
"vim8, 异步, 实时代码检查器
Plug 'w0rp/ale'

"vim8, 异步生成ctags, ctags用于函数跳转的~
Plug 'ludovicchabant/vim-gutentags'

"注释插件           Plug 'vimcn/NERD_commenter.cnx'
Plug 'scrooloose/nerdcommenter'

"国人写的snipMate增强,按<C-\>,很好很强大,自定义很难~ Plug 'drmingdrmer/xptemplate'
"片段引擎, snipmate增强版(未自带片段)
Plug 'SirVer/ultisnips'
  "snipmate和ultisnips引擎的代码片段集, utlisnips默认都会检索 Plug 'honza/vim-snippets'
  Plug 'needle-wang/vim-snippets'

"snipmate与xptemplate快键不冲突, 不支持嵌套, 直接tab, 二者已停止更新~
"Plug 'msanders/snipmate.vim' | Plug ''scrooloose/snipmate-snippets'

"Plug 'jaredly/vim-debug'
"######### 2. 编程-相关 END #########

"######### 3. PYTHON-相关 #########
"没必要用for, 有文件类型判断
Plug 'fs111/pydoc.vim', { 'for': 'python' }
"解决py方法定义的括号的缩进问题     Plug 'hynek/vim-python-pep8-indent'
"text objects for Python
"Plug 'jeetsukumaran/vim-pythonsense'
"Plug 'needle-wang/ViMango'
Plug 'needle-wang/vim-jumptoview', { 'for': 'python' }

"for snipmate, 不过ultisnips默认支持
Plug 'needle-wang/bootstrap-snippets', { 'for': ['html', 'htmldjango'] }
"jinja2语法文件
"Plug 'Glench/Vim-Jinja2-Syntax'
"######### 3. PYTHON-相关 END #########

"######### 4. front-end-相关 #########
"Plug 'othree/html5.vim'
"here is ZenCoding.vim's new name
Plug 'mattn/emmet-vim', { 'for': ['html', 'htmldjango', 'css', 'jsp'] }
"Live browser editing(实时更新html浏览)
Plug 'jaxbot/browserlink.vim', { 'for': ['html', 'htmldjango'] }

"######### 4. front-end-相关 END #########

"######### 5. JAVA-相关 #########
"JDE有单独菜单,上手难~
"Plug 'Vim-JDE'
"JAVA补全, 如方法等
"Plug 'javacomplete'
"######### 5. JAVA-相关 END #########

"######### 6. 其他-相关 #########
Plug 'tpope/vim-fugitive'
Plug 'iamcco/mathjax-support-for-mkdp', { 'for': 'markdown' }
Plug 'iamcco/markdown-preview.vim', { 'for': 'markdown' }
"shfmt命令不知道怎么安装...
"Plug 'z0mbix/vim-shfmt', { 'for': 'sh' }
"利用vundle把它下下来而已,非vim插件     Plug 'sgerrand/xfce4-terminal-colors-solarized'
"有lispbox就别老想着这东东了,巨麻烦~    Plug 'slimv.vim'
"######### 6. 其他-相关 END #########

" Shorthand notation; fetches https://github.com/junegunn/vim-easy-align
"Plug 'junegunn/vim-easy-align'
" Any valid git URL is allowed
"Plug 'https://github.com/junegunn/vim-github-dashboard.git'
" Multiple Plug commands can be written in a single line using | separators
"Plug 'SirVer/ultisnips' | Plug 'honza/vim-snippets'
" On-demand loading
"Plug 'scrooloose/nerdtree', { 'on':  'NERDTreeToggle' }
"Plug 'tpope/vim-fireplace', { 'for': 'clojure' }
" Using a non-master branch
"Plug 'rdnetto/YCM-Generator', { 'branch': 'stable' }
" Using a tagged release; wildcard allowed (requires git 1.9.2 or above)
"Plug 'fatih/vim-go', { 'tag': '*' }
" Plugin options
"Plug 'nsf/gocode', { 'tag': 'v.20150303', 'rtp': 'vim' }
" Plugin outside ~/.vim/plugged with post-update hook
"Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
" Unmanaged plugin (manually installed and updated)
"Plug '~/my-prototype-plugin'
" Initialize plugin system
call plug#end()

"   ######### VIM-相关-插件配置 #########

"------ for surround ------
nmap q<Space> ysiw<Space><Space>f<Space>
"为光标下的字串加双引号
nmap q; ysiW"f"
"为光标下的单词加双引号
nmap q' ysiw"f"
nmap q( ysiw(%
nmap q) ysiw)%
vmap q; S"f"
vmap q' q;
vmap q( S(%
vmap q) S)%
"------ for surround ------

"------ for delimitMate ------
"pep8-indent一定要
let delimitMate_expand_cr = 1
let delimitMate_expand_space = 1
"------ for delimitMate ------

"------ for easymotion ------
let g:EasyMotion_leader_key = ','
"------ for easymotion ------

"------ for nerdtree ------
noremap <silent> <F7> :NERDTreeToggle<CR>
nnoremap <silent> gn        :NERDTreeFind<CR>
nnoremap <silent> gN        :NERDTree<CR>
let NERDTreeQuitOnOpen = 1
let NERDTreeMinimalUI  = 1
let NERDTreeMouseMode  = 2
let NERDTreeIgnore     = ['\.vim$', '\~$', '\.pyc$', '\.ttf$']
"最后一个窗口是nerdtree时, 关闭vim
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif
"自动打开nerdtree
"autocmd VimEnter * NERDTree | wincmd l
"------ for nerdtree ------

"------ for lightline ------
"vista
function! NearestMethodOrFunction() abort
  return get(b:, 'vista_nearest_method_or_function', '')
endfunction
let g:lightline = {
      \'colorscheme': 'powerline',
      \ 'active': {
      \   'left': [ [ 'mode', 'paste' ],
      \             [ 'readonly', 'filename', 'modified', 'method' ] ]
      \ },
      \ 'component_function': {
      \   'method': 'NearestMethodOrFunction'
      \ },
      \ }
"tagbar
"function! TagbarStatusFunc(current, sort, fname, ...) abort
    "let g:lightline.fname = a:fname
    "return lightline#statusline(0)
"endfunction
""让lightline嵌入tagbar中(默认支持nerdtree和ctrlp)
"let g:tagbar_status_func = 'TagbarStatusFunc'
"------ for lightline ------

"------ for solarized ------
let g:solarized_termcolors = 256
let g:solarized_contrast   = "high"    "default value is normal
syntax enable
set background=dark
colorscheme solarized
"colorscheme desert     "也不错
"set fillchars=vert:│   "设置窗口分隔符, 必须要有值, 且必须是单宽字符
"禁掉主题提供的窗口分隔线背景
highlight VertSplit ctermbg=NONE guibg=NONE
"------ for solarized ------

"------ for fcitx --------
set ttimeoutlen=200
"fcitx不支持ex模式
"------ for fcitx --------

""------ for ctrlp ------
"let g:ctrlp_regexp        = 1
"let g:ctrlp_by_filename   = 1
"let g:ctrlp_custom_ignore = {
    "\ 'dir'  :  '\v[\/]\.(git|hg|svn|rvm)$' ,
    "\ 'file' :  '\v\.(exe|so|dll|pyc|swp)$' ,
    "\ }
""------ for ctrlp ------

"------ for ack.vim ------
"let g:ackprg = 'ag --nogroup --nocolor --column'
"------ for ack.vim ------

"------ for ag.vim ------
let g:ag_prg = 'ag --column --smart-case'
"------ for ag.vim ------

"------ for LeaderF ------
let g:Lf_ShortcutF = '<c-p>'
let g:Lf_ShortcutB = '<m-n>'
noremap <c-n> :LeaderfMru<CR>
noremap <m-p> :LeaderfFunction!<CR>
noremap <m-n> :LeaderfBuffer<CR>
noremap <m-m> :LeaderfTag<CR>
let g:Lf_StlSeparator = { 'left': '', 'right': '', 'font': '' }

let g:Lf_RootMarkers = ['.project','.root','.git','.hg','.svn']
let g:Lf_WorkingDirectoryMode = 'Ac'
let g:Lf_WindowHeight = 0.30
if has("win32")
    let g:Lf_CacheDirectory = expand('$HOME/vimfiles/cache')
else
    let g:Lf_CacheDirectory = expand('~/.vim/cache')
endif
let g:Lf_ShowRelativePath = 0
let g:Lf_HideHelp = 1
let g:Lf_StlColorscheme = 'powerline'
let g:Lf_PreviewResult = {'Function':0, 'BufTag':0}
"git ls-files会列出的是octal形式的utf8, leaderf没有处理
"如: "training\345\256\214\346\210\220\345\276\214.txt"
"git config --global core.quotepath false
"let g:Lf_UseVersionControlTool = 0
let g:Lf_WildIgnore = {
    \ 'dir'  : ['.git','.hg','.svn'],
    \ 'file' : ['*.sw?','~$*','*.bak','*.exe','*.o','*.so','*.py[co]', '*.ico']
    \}
"------ for LeaderF ------

"------ for asyncrun ------
" 自动打开 quickfix window ，高度为8
let g:asyncrun_open = 0
" 任务结束时候响铃提醒, 0为关闭
let g:asyncrun_bell = 0
" asyncrun根据特殊文件名 来识别 project 的根目录
let g:asyncrun_rootmarks = ['.svn', '.git', '.root', 'build.xml']
" "<root>" 或者 "$(VIM_ROOT)" 来表示项目所在路径
"nnoremap <silent> <F5> :AsyncRun -save=1 -cwd=<root> make <CR> 
" 设置 打开/关闭 Quickfix 窗口
"nnoremap <F6> :call asyncrun#quickfix_toggle(6)<CR>
let $PYTHONUNBUFFERED=1
"------ for asyncrun ------

"   ######### VIM-相关-插件配置 END -#########

"   ######### 编程-相关-插件配置 #########

"------ for tabular ------
"g;和g,很有用
noremap      g/         :Tab /
noremap      g=         :Tab /=<CR>
noremap      g1         :Tab /!=<CR>
noremap      g2         :Tab /==<CR>
noremap      g.         :Tab /,<CR>
noremap      g"         :Tab /"<CR>
noremap      g'         :Tab /'<CR>
noremap      g:         :Tab /:<CR>
noremap      g<Space>   :Tab / <CR>
"noremap      g<Bar>     :Tab /<Bar><CR>
"------ for tabular ------

"------ for indentLine ------
let g:indentLine_char = '┊'
let g:indentLine_color_term = 239       " vim
" none X terminal
let g:indentLine_color_tty_light = 7
let g:indentLine_color_dark = 1
let g:indentLine_enabled = 0
let g:indentLine_fileType = ['python']
let g:indentLine_indentLevel = 3
nnoremap g<Bar> :IndentLinesToggle<CR>
"------ for indentLine ------

"------ for echodoc.vim ------
let g:echodoc_enable_at_startup = 1
"------ for echodoc.vim ------

"------ for tagbar ------
"noremap <silent> <F8> :TagbarToggle<CR>
"let g:tagbar_width = 37
""let g:tagbar_autofocus   = 1    "打开tagbar时自动获取焦点
""let g:tagbar_autoshowtag = 0    "自动打开折叠
""let g:tagbar_sort        = 0    "标签按代码中的顺序排序
"let g:tagbar_compact     = 1    "去掉含有<F1>的首行
"let g:tagbar_indent      = 3    "修改tagbar内的缩进空间
"let g:tagbar_singleclick = 1    "单击打开标签
"set updatetime=700              "自动高亮当前tag的间隔时间，全局的
"------ for tagbar ------

"------ for vista ------
noremap <silent> <F8> :Vista!!<CR>
let g:vista_icon_indent = ["▸ ", ""]
let g:vista_default_executive = 'ctags'
let g:vista_fzf_preview = ['right:60%']
let g:vista#renderer#enable_icon = 1
let g:vista#renderer#icons = {
\   "function": "\uf794",
\   "variable": "\uf71b",
\  }
"------ for vista ------

"------ for YouCompleteMe ------
"vim中, <C-m>等价于Enter(<CR>)
"跳转到定义
"nnoremap <silent> <leader>g :YcmCompleter GoTo<CR>
nnoremap <silent>        go :tab YcmCompleter GoTo<CR>
autocmd FileType python nnoremap <silent> gd :tab YcmCompleter GoToDeclaration<CR>
let g:ycm_seed_identifiers_with_syntax = 1                          "语法关键字补全
let g:ycm_complete_in_comments         = 1                          "在注释中也启用补全
let g:ycm_goto_buffer_command          = 'split-or-existing-window' "设定跳转命令打开方式
let g:ycm_key_list_select_completion   = ['<Down>']
let g:ycm_key_list_previous_completion = ['<Up>']
let g:ycm_show_diagnostics_ui = 0
let g:ycm_collect_identifiers_from_comments_and_strings = 1
"ycmd server使用的py版本
"let g:ycm_server_python_interpreter='python3'
"python completer使用的py版本, 忘了从哪里看到的此选项, 搜不到
let g:ycm_python_binary_path = 'python3'
"let g:ycm_add_preview_to_completeopt   = 1
"let g:ycm_autoclose_preview_window_after_insertion = 1
"上行无效~, 下行有效~, 老出问题
"autocmd InsertLeave * if pumvisible() == 0|pclose|endif
"YouCompleteMe对不支持语义(semantic)补全的就会使用omnifunc, 如html
"启用范围为 黑名单在白名单中的补集
let g:ycm_filetype_blacklist = {
        \ 'c'        : 1,
        \ 'cpp'      : 1,
        \ 'infolog'  : 1,
        \ 'json'     : 1,
        \ 'mail'     : 1,
        \ 'nerdtree' : 1,
        \ 'notes'    : 1,
        \ 'pandoc'   : 1,
        \ 'qf'       : 1,
        \ 'tar'      : 1,
        \ 'tagbar'   : 1,
        \ 'text'     : 1,
        \ 'unite'    : 1,
        \ 'vimwiki'  : 1,
        \}
"let g:ycm_filetype_whitelist = {
        "\ 'css'        : 1,
        "\ 'html'       : 1,
        "\ 'htmldjango' : 1,
        "\ 'java'       : 1,
        "\ 'javascript' : 1,
        "\ 'python'     : 1,
        "\}
"------ for YouCompleteMe ------

""------ for syntastic ------
""手动检查, 主动模式会卡一会(pylint的原因,用pyflakes就好了)
"let g:syntastic_mode_map       = { 'mode' : 'passive' }
"let g:syntastic_error_symbol   = 'X>'
"let g:syntastic_warning_symbol = '⚠'

"let g:syntastic_check_on_wq = 0     "退出不检查
""主动模式与python-mode冲突, 导致有两次语法检查, 要么设成被动模式
""let g:pymode_lint_write = 0     "for python-mode
""出现错误自动打开错误位置列表, 没有出现则不打开
""let g:syntastic_auto_loc_list           = 1
"let g:syntastic_always_populate_loc_list = 1                          "即时刷新错误位置(:Errors)列表!
"let g:syntastic_quiet_messages           = {'level' : 'warnings'}     "去掉警告信息
"let g:syntastic_python_checkers          = ['pyflakes']
""syntastic_java_checkers与eclim有冲突
""html检查要联网, 或自己架server~
""let g:syntastic_html_checkers       = ['w3']
""let g:syntastic_javascript_checkers = ['javascript']
""nnoremap gs :SyntasticCheck<CR>

"function! Syntastic_map(map_cmd1, map_cmd2)
    ""下行可以用\<bar> 或 \|
    ""nnoremap ]l :try<bar>lnext<bar>catch /^Vim\%((\a\+)\)\=:E\%(776\<bar>553\<bar>42\):/<bar>echo v:exception<bar>endtry<CR>
    "try
        "execute a:map_cmd1
    ""下行用\<bar>会无效
    ""catch /^Vim\%((\a\+)\)\=:E\%(776\<Bar>553\<Bar>42\):/
    ""E776: no location list, E553: no more error item, E42: no error
    "catch /^Vim\%((\a\+)\)\=:E\%(776\|553\|42\):/
        "try
            "up  "SyntasticCheck只能检查保存后的内容
            "SyntasticCheck
            "execute a:map_cmd2
        "catch /.*/
            "echo v:exception
        "endtry
    "catch
        "echo v:exception
    "endtry
"endfunction
"nnoremap <silent> [n :call Syntastic_map("lnext", "lfirst")<CR>
"nnoremap <silent> [N :call Syntastic_map("lprevious", "llast")<CR>
""------ for syntastic ------

"------ for ale ------
nnoremap <silent> [n :ALENextWrap<CR>
nnoremap <silent> [N :ALEPreviousWrap<CR>
"let g:ale_sign_column_always = 1
let g:ale_completion_delay = 500
let g:ale_echo_delay = 20
let g:ale_echo_msg_format = '[%linter%] %code: %%s'
"let g:ale_fix_on_save = 1

"语法修复器: ALEFix
"pip install yapf isort
"'sh': ['shfmt'], 但是shfmt不会装...
let g:ale_fixers = {
\   'python' : ['yapf', 'isort'],
\}

let g:ale_lint_delay = 500
let g:ale_lint_on_insert_leave = 1
let g:ale_lint_on_text_changed = 'normal'
let g:ale_linters_explicit = 1

"语法检查器(自动检查)
"pip install flake8
"apt-get install shellcheck
let g:ale_linters = {
\   'python' : ['flake8'],
\   'sh'     : ['shellcheck'],
\   'vim'    : ['vint'],
\}

let g:ale_python_flake8_options = '--ignore=E111,E114,E121,E128,E203,E251,E266,E501,F841,W391,W503'
"没有这个yapf选项, 在项目的任意父目录加个.style.yapf
"let g:ale_python_yapf_options = '--style={indent_width:2}'
let g:ale_sign_error = '✗'
let g:ale_sign_warning = '⚡'

hi! clear SpellBad
hi! clear SpellCap
hi! clear SpellRare
hi! SpellBad gui=undercurl guisp=red
hi! SpellCap gui=undercurl guisp=blue
hi! SpellRare gui=undercurl guisp=magenta
"------ for ale ------

"------ for vim-gutentags ------
set tags=./.tags;,.tags "这句加跟不加没啥区别呀~
let g:gutentags_project_root = ['.root', '.svn', '.git', '.hg', '.project']

" 所生成的数据文件的名称
let g:gutentags_ctags_tagfile = '.tags'

if has("win32")
    let s:vim_tags = expand('$HOME/vimfiles/cache/tags')
else
    let s:vim_tags = expand('~/.vim/cache/tags')
endif
" 将自动生成的 tags 文件全部放入 ~/.cache/tags 目录中，避免污染工程目录
let g:gutentags_cache_dir = s:vim_tags

" 配置 ctags 的参数
let g:gutentags_ctags_extra_args = ['--fields=+niazS', '--extra=+q']
let g:gutentags_ctags_extra_args += ['--c++-kinds=+px']
let g:gutentags_ctags_extra_args += ['--c-kinds=+px']

" 检测 ~/.cache/tags 不存在就新建
if !isdirectory(s:vim_tags)
   silent! call mkdir(s:vim_tags, 'p')
endif
"------ for vim-gutentags ------

"------ for xptemplate ------
"let g:xptemplate_nav_prev = '<C-k>'
"------ for xptemplate ------

"------ for UltiSnips ------
let g:UltiSnipsExpandTrigger       = "<tab>"
let g:UltiSnipsJumpForwardTrigger  = "<tab>"
let g:UltiSnipsJumpBackwardTrigger = "<C-k>"
"------ for UltiSnips ------

"   ######### 编程-相关-插件配置 END #########

"   ######### PYTHON-相关-插件配置 #########

"------ for vim-jumptoview ------
let g:jumptoview_patterns_prefix = ''
"------ for vim-jumptoview ------
"
"------ for bootstrap-snippets ------
"有YouCompleteMe, 不用设置就支持了
"set dictionary+=~/.vim/bundle/bootstrap-snippets/dictionary
"set complete+=k
"------ for bootstrap-snippets ------

"   ######### PYTHON-相关-插件配置 END #########

"   ######### front-end-相关-插件配置 #########

"------ for emmet ------
"emmet不能映射<Bar>, 会导致ultisnips失效
"不能用noremap, leaderkey会失效
"<C-/>, <C-&>, <C-_>可生成
"还有一些特殊符号可改, 具体忘了
"这跟顺序有关嘛? 在EmmetInstall后面let有影响嘛?
autocmd FileType html,htmldjango,css,jsp EmmetInstall
            \| let g:user_emmet_install_global = 0
            \| let g:user_emmet_leader_key = 'Q'
            \| let g:user_emmet_mode = 'nv'
            \| map <C-n>  <Plug>(emmet-expand-abbr)
            \| map      <Plug>(emmet-expand-abbr)
            \| imap     <C-o><Plug>(emmet-expand-abbr)
"------ for emmet ------

"------ for browserlink ------
"autocmd BufWritePost *.html :BLReloadPage
"1. run: ~/.vim/bundle/browserlink.vim/browserlink/start.sh
"要装nodejs, 并: sudo ln -s /usr/bin/nodejs /usr/bin/node
"2. 在页面中加上<script src='http://127.0.0.1:9001/js/socket.js'></script>
"下行写在browserlink.js里(将在chrome里的改动 动态写回 原文件中):
"window.__BL_OVERRIDE_CACHE = true
"------ for browserlink ------

"   ######### front-end-相关-插件配置 END #########

"   ######### JAVA-相关-插件配置 #########

"------ for Vim-JDE" ------
"autocmd FileType java inoremap <buffer> . .<C-x><C-u>
"以这个为主(不支持"someStr".形式,编译后支持本类),javacomplete为辅
"set completefunc=VjdeCompletionFun
"let g:vjde_lib_path = "/opt/MyEclipse_10_0/Common/plugins/com.genuitec.eclipse.j2eedt.core_10.0.0.me201110301321/data/libraryset/EE_5/javaee.jar"
"let g:vjde_javadoc_path = "/opt/jdk1.6.0_38/sourcecode/"
"------ for Vim-JDE" ------

"for java, ctags就是一砣, 太差了,一点都跳不准~
"sudo ctags -R --fields=+iaS --extra=+q
"autocmd FileType java set tags=/opt/jdk1.6.0_38/sourcecode/tags
"for javacomplete
"接口变量只能补全接口的方法,无Object的
"完整包路径的对象变量的点补全
"final类的对象变量的点补全,"someStr".也支持
"不支持自定义的类～
"已经相当不错了~
"autocmd FileType java setlocal omnifunc=javacomplete#Complete
"文档说是显示参数信息,不知道怎么用~,用vjde的
"setlocal completefunc=javacomplete#CompleteParamsInfo
"for pythoncomplete
"vim自带pythoncomplete.vim, 智能启用, 但是找不到哪autocmd的~
"YouCompleteMe自带了python补全~,且与下面的点映射冲突
"有时要加<C-p>上移, 有时又不要, 不清楚~
"autocmd FileType python inoremap <buffer> . .<C-x><C-o><C-p>

"docString的预览窗口会闪屏,所以要取消preview, 设成全局的更好些
set completeopt=longest,menu

"------ for eclim ------
"很完美,就是vim版eclipse,想受虐就用.
"保存时语法检查,巨快(syntastic完全比不上~)
"eclim默认会用pyflakes和python编译器验证语法,第一次检测没有pyflakes就不再用pyflakes
"let g:EclimPythonValidate = 0  "禁用保存文件时验证,.py不需要开eclimd
"有YouCompleteMe就不需要这个映射
"autocmd FileType java inoremap <buffer> . .<C-x><C-u>
"                   \| nnoremap <silent> <buffer> [i :JavaImportOrganize<CR>
"                   \| nnoremap <silent> <buffer> [d :JavaDocPreview<CR>
"                   \| nnoremap <silent> <buffer> [f :%JavaFormat<CR>
"                   \| nnoremap <silent> <buffer> <CR> :JavaSearchContext<CR>
"                   \| let g:EclimJavaCompleteCaseSensitive = 1
"                   \| let g:EclimCompletionMethod = 'omnifunc'
"------ for eclim ------

"   ######### JAVA-相关-插件配置 END #########

"   ######### 其他-相关-插件配置 #########

"------ for vim-fugitive ------
nnoremap \g :Gstatus<CR>
"------ for vim-fugitive ------

"------ for markdown-preview ------
autocmd FileType markdown nnoremap X :MarkdownPreview<CR>
"------ for markdown-preview ------

"   ######### 其他-相关-插件配置 END #########

